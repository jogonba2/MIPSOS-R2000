##############################################################
##              ÁREA DE DATOS DEL MANEJADOR                 ##
##############################################################

		.kdata

		## Contexto del proceso principal

salvareg:	.word 0,0,0	# aquí se guardan $at, $t1 y $t0
dirret:		.word 0		# aquí se guarda la dirección de retorno

		## Estado del proceso principal

		LISTO  	  	= 0		# Posibles estados del proceso
		ESPERANDO 	= 1
			


estado:		.word LISTO		# Estado del proceso 
					# (inicialmente, está listo)
despertador: .word 0
		## Variables para el reloj
segundos:   .word 0

#############################################################
##           COMIENZA EL CÓDIGO DEL MANEJADOR              ##
#############################################################

          .ktext 0x80000080

## Para la cuestión 1 (2ª parte)
## $eti: j $eti  # <- Normalmente, esta línea es un comentario


## Salvar contexto

	.set noat
	sw $at,0($k1)	      	 	# Salvo $at
	.set at
	sw $t0,4($k1)			# Salvo $t0. Lo utilizaremos para direcciones
	sw $t1,8($k1)			# Salvo $t1. Lo utilizaremos para datos

## Análisis de causa de excepción

	mfc0 $k0,$13			# Copio registro de causa
	andi $t0,$k0, 0x003c		# Aíslo el código de causa
	beq $t0,$zero,interrupcion	# Interrupción hardware?  
	li $t1, 0x20			# Llamada syscall? 
	beq $t1, $t0, llamada 
	## Gestionar overflows artiméticos, fallo de página y otras excepciones ##

	b retexc			# Ignoro cualquier otra causa   

#############################################################
##             TRATAMIENTO DE INTERRUPCIONES               ##
#############################################################

interrupcion:      

## Preparo dirección de retorno (sólo si es el proceso principal)

	lw $t0,estado
	li $t1,LISTO
	bne $t0,$t1,$L1
	mfc0 $t0, $14			# EPC
	sw $t0, dirret

## Análisis de interrupciones pendientes

$L1:	andi $t0, $k0, 0x1000		# int2 pendiente?
	bne  $t0, $zero, int2
	#andi $t0, $k0, 0x800		# int1 pendiente?
	#bne  $t0, $zero, int1
	#andi $t0, $k0, 0x400		# int0 pendiente?
	#bne  $t0, $zero, int0
	b retexc			# interrupción espúrea

#-------------------------------------------------------------

## Tratamiento de la interrupción de RELOJ
## Cuestión 2 ##
int2:
	la $t0,segundos
	lw $t1,0($t0)
	addi $t1,$t1,1
	sw $t1,0($t0)
	la $t0,0xFFFF0010
	li $t2,1
	sb $t2,0($t0)
	## Comprobación de estado (t1 tiene segundos)##
	la $t0,estado
	lw $t1,0($t0)
	li $s0,1
	bne $t1,$s0,fin
	la $t0,despertador
	la $t1,segundos
	lw $s0,0($t0) # valor despertador
	lw $s1,0($t1) # valor segundos
	bne $s0,$s1,fin
	la $t0,estado
	sw $zero,0($t0)
fin: b retexc			# fin

#############################################################
##                    LLAMADAS AL SISTEMA                  ##
#############################################################

llamada:

## Preparo dirección de retorno

	mfc0 $k0, $14		# EPC
	addi $k0,$k0,4
	sw $k0, dirret

## Selecciono la llamada

	li $t1,11			# print_char
	beq $t1,$v0,print_char
        li $t1,12			# read_char
	beq $t1,$v0,read_char
	# print string
	# print 
	li $t1,90			# get_version
	beq $t1,$v0,get_version
	li $t1,91			# get_time
	beq $t1,$v0,get_time
	li $t1,92			# wait_time
	beq $t1,$v0,wait_time
	b retexc			# Función no implementada

#---------------------------------------------------------------

###### PRINT_CHAR (Servicio 11)

## Sincronización por consulta de estado con la consola ##
print_char:
	li $t0, 0xffff0008
$L0:	lb $t1, 0($t0)   		# leo palabra de estado de la consola
	andi $t1, $t1, 1
	beq $t1,$zero,$L0
	sb $a0, 4($t0) 
	b retexc

###### READ_CHAR (Servicio 12)

## Sincronización por consulta de estado con el teclado ##
read_char:
        li $t0,0xFFFF0000
$LR:    lb $t1,0($t0)
        andi $t1,$t1,1
		beqz $t1,$LR            
		lb $t1,4($t0)           # Leer del registro de datos del teclado, Cancelación automática
		move $v0,$t1
        b retexc

###### GET_VERSION (Servicio 90)

get_version:
	li $v0,2
	b retexc


###### GET_TIME (Servicio 91)

get_time:
	la $t0,segundos
	lw $v0,0($t0)
	b retexc

###### WAIT_TIME (Servicio 92)

wait_time:
	la $t0,estado
	li $t1,1
	sw $t1,0($t0)
	la $t0,segundos
	la $t1,despertador
	lw $t2,0($t0)
	add $t3,$t2,$a0
	sw $t3,0($t1)
	b retexc


#############################################################
##             CONMUTACIÓN Y FIN DE MANEJADOR              ##
#############################################################

retexc:

## Conmutación de procesos

	lw $t0,estado
	li $t1,LISTO
	beq $t0,$t1,$L2		# Si (estado = LISTO), volver al proceso principal

	la $k0,proceso_ocioso
	b $L3			# en otro caso, volver a proceso ocioso
         
$L2:	lw $k0,dirret		# (en dirret está la dirección de retorno del 
				#  proceso principal)

## Fijar contexto

$L3:	lw $t1, 8($k1)		# Restauro $t1
	lw $t0, 4($k1)		# Restauro $t0
	.set noat
	lw $at, 0($k1)		# Restauro $at
	.set at
	rfe			# restaurar bits KU/IE
	jr $k0

##############################################################



###################################################################
##                       CÓDIGO DE INICIO                        ##
###################################################################

          .text
          .globl __start 
__start: 

## Preparo las interfaces de los periféricos

	li $t0, 0xffff0000
	sb $zero, 0($t0)	# inhibo interrupción en el HW del teclado

	li $t0, 0xffff0008
	sb $zero, 0($t0)	# inhibo interrupción en el HW de la consola

	li $t0, 0xffff0010
	li $t1,1
	sb $t1, 0($t0)	# habilito interrupción en el HW del reloj

## Preparo el registro de estado del coprocesador y fijo modo usuario
## Y desenmascarar el reloj ##
	mfc0 $t0, $12
	#ori $t0, $0, 0x0003	# Interrupciones habilitadas
	ori $t0,$0,0x0403 # Interrupciones habilitadas y reloj desenmascarado #
	mtc0 $t0, $12

## Salto al programa de usuario

	la $k1, salvareg	# $k1 tendrá la dirección de la zona para salvar reg.
	jal main

## Shutdown

	li $v0, 10
	syscall			# syscall 10 (exit)


###################################################################
##                  PROCESO OCIOSO DEL SISTEMA                   ##
###################################################################

proceso_ocioso: # proceso ocioso del sistema
	b proceso_ocioso
